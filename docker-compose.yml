version: '3.8'

networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local

services:
  # PostgreSQL Database
  postgres-db:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Service Discovery (Eureka)
  service-discovery:
    build:
      context: ./infrastructure/service-discovery
      dockerfile: Dockerfile
    container_name: ecommerce-service-discovery
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - JAVA_OPTS=${JAVA_OPTS}
    ports:
      - "8761:8761"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Config Server
  config-server:
    build:
      context: ./infrastructure/config-server
      dockerfile: Dockerfile
    container_name: ecommerce-config-server
    environment:
      # Force native profile in containers to avoid missing git repo
      - SPRING_PROFILES_ACTIVE=native
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_SERVER_URL}
      - JAVA_OPTS=${JAVA_OPTS}
    ports:
      - "8888:8888"
    networks:
      - ecommerce-network
    depends_on:
      service-discovery:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # API Gateway
  api-gateway:
    build:
      context: ./infrastructure/api-gateway
      dockerfile: Dockerfile
    container_name: ecommerce-api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_SERVER_URL}
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      - JAVA_OPTS=${JAVA_OPTS}
    ports:
      - "8088:8080"
    networks:
      - ecommerce-network
    depends_on:
      service-discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: ecommerce-user-service
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_SERVER_URL}
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - JAVA_OPTS=${JAVA_OPTS}
    ports:
      - "8089:8081"
    networks:
      - ecommerce-network
    depends_on:
      postgres-db:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Product Service
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    container_name: ecommerce-product-service
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_SERVER_URL}
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - JAVA_OPTS=${JAVA_OPTS}
    ports:
      - "8090:8082"
    networks:
      - ecommerce-network
    depends_on:
      postgres-db:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Order Service
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: ecommerce-order-service
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_SERVER_URL}
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - JAVA_OPTS=${JAVA_OPTS}
    ports:
      - "8091:8083"
    networks:
      - ecommerce-network
    depends_on:
      postgres-db:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s